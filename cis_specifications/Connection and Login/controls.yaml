section:
  name: "Connection and Login"
  description: |
    Settings are generally recommended to be applied to all defined profiles. The following
    presents standalone examples of logins for particular use cases. The authentication
    rules are read from the YugabyteDB host-based authentication file, pg_hba.conf, from
    top to bottom. The first rule conforming to the condition of the request executes the
    METHOD and stops further processing of the file. Incorrectly applied rules, as defined
    by a single line instruction, can substantially alter the intended behavior resulting in
    either allowing or denying login attempts.
  number: "6"

controls:
  - id: "6.1"
    title: "Ensure login via local UNIX Domain Socket is configured correctly"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      A remote host login, via SSH, is arguably the most secure means of remotely accessing
      and administering the YugabyteDB server. Once connected to the YugabyteDB server,
      using the ysqlsh client, via UNIX DOMAIN SOCKETS, while using the peer
      authentication method is the most secure mechanism available for local database
      connections. Provided a database user account of the same name of the UNIX account
      has already been defined in the database, even ordinary user accounts can access the
      cluster in a similarly highly secure manner.
    rationale: |

    audit: |
      Newly created data clusters are empty of data and have two user accounts, the
      superusers yugabyte and postgres. By default, the data cluster superuser is named
      after the UNIX account yugabyte. Login authentication is tested via UNIX DOMAIN
      SOCKETS by the UNIX user account yugabyte, the default account, and set_user has
      not yet been configured:
      # ./bin/yugabyte
      yugabyte=#
      Login attempts by another UNIX user account as the superuser should be denied:
      # su - user1 # whoami user1
      # ./bin/ysqlsh -U yugabyte -d yugabyte
      ysqlsh: FATAL: Peer authentication failed for user "yugabyte"
      # exit
      This test demonstrates that not only is logging in as the superuser blocked, but so is
      logging in as another user:
      # su - user2 # whoami user2
      # ./bin/ysqlsh -U yugabyte -d yugabyte
      ysqlsh: FATAL: Peer authentication failed for user "yugabyte"
      # ./bin/ysqlsh -U user1 -d yugabyte
      ysqlsh: FATAL: Peer authentication failed for user "user1"
      # ./bin/ysqlsh -U user2 -d yugabyte
      yugabyte=#
    remediation: |
      Creation of a database account that matches the local account allows PEER
      authentication:
      # ./bin/ysqlsh -c "CREATE ROLE user1 WITH LOGIN;" CREATE ROLE
      Execute the following as the UNIX user account, the default authentication rules should
      now permit the login:
      # su - user1
      # whoami user1
      # ./bin/ysqlsh -d yugabyte
      yugabyte=#
      As per the host-based authentication rules in $PGDATA/pg_hba.conf, all login attempts
      via UNIX DOMAIN SOCKETS are processed on the line beginning with local.
      Once edited, the server process must reload the authentication file before it can take
      effect. Improperly configured rules cannot update i.e. the old rules remain in place. The
      YugabyteDB logs will report the outcome of the SIGHUP:
      yugabyte=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:
      ./bin/yb-tserver --ysql_hba_conf_csv
    impact: |

    default_value:
    type: "Manual"
    references:
      -
      -
    cis_controls:
      -

  - id: "6.2"
    title: "Ensure login via 'host' TCP/IP Socket is configured correctly"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      A large number of authentication METHODs are available for hosts connecting using
      TCP/IP sockets, including:
      • trust
      • reject
      • md5
      • scram-sha-256
      • password
      • gss
      • sspi
      • ident
      • pam
      • ldap
      • radius
      • cert
      METHODs trust, password, and ident are not to be used for remote logins.
      METHOD md5 is the most popular and can be used in both encrypted and unencrypted
      sessions, however, it is vulnerable to packet replay attacks. It is recommended that
      scram- sha-256 be used instead of md5.
      Use of the gss, sspi, pam, ldap, radius, and cert METHODs are dependent upon the
      availability of external authenticating processes/services and thus are not covered in
      this benchmark.
    rationale: |
      
    audit: |
      
    remediation: |
      Confirm a login attempt has been made by looking for a logged error message detailing
      the nature of the authenticating failure. In the case of failed login attempts, whether
      encrypted or unencrypted, check the following:
      • The server should be sitting on a port exposed to the remote connecting host i.e.
      NOT ip address 127.0.0.1
      listen_addresses = '*'
      • An authenticating rule must exist in the file ysql_hba.conf
      This example permits only encrypted sessions for the yugabyte role and denies all
      unencrypted sessions for the yugabyte role:
      # TYPE DATABASE
      USER
      ADDRESS
      METHOD
      hostssl all
      yugabyte
      0.0.0.0/0
      scram-sha-256
      hostnossl all
      yugabyte
      0.0.0.0/0
      reject
    impact: |
      
    default_value: |
      The availability of the different password-based authentication methods depends on
      how a user's password on the server is encrypted (or hashed, more accurately). This is
      controlled by the configuration parameter password_encryption at the time the
      password is set.
      If a password was encrypted using the scram-sha-256 setting, then it can be used for
      the authentication methods scram-sha-256, md5, and password (but password
      transmission will be in plain text in the latter case).
      If a password was encrypted using the md5 setting, then it can be used only for the md5
      and password authentication method specifications (again, with the password
      transmitted in plain text in the latter case).
      To check the currently stored password hashes, see the system catalog pg_authid.
      To upgrade an existing installation from md5 to scram-sha-256, after having ensured that
      all client libraries in use are new enough to support SCRAM, set password_encryption
      = 'scram-sha-256' in ysql_pg.conf, reload the postmaster, make all users set new
      passwords, and change the authentication method specifications in ysql_hba.conf to
      scram-sha-256.
    type: "Manual"
    references:
      - 
      - 
    cis_controls:
      - 