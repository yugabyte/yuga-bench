section:
  name: "Installation and Patches"
  description: |
    One of the best ways to ensure YugabyteDB security is to implement security updates
    as they come out, along with any applicable OS patches that will not interfere with
    system operations. It is additionally prudent to ensure the installed version has not
    reached end-of-life.
  number: "1"

controls:
  - id: "1.1"
    title: "Ensure packages are obtained from authorized repositories"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |

    rationale: |

    audit: |
      Identify and inspect configured repositories to ensure they are all valid and authorized
      sources of packages. The following is an example of a simple Linux command verifying
      integrity of YugabyteDB package by validating the checksum:
      #!/bin/bash
      # File name and URLs
      FILE_NAME="yugabyte-2.20.0.0-b1-linux-x86_64.tar.gz"
      FILE_URL="https://downloads.yugabyte.com/releases/2.20.0.0/$FILE_NAME"
      SIGNATURE_URL="$FILE_URL.sha"
      # Check if file exists locally
      if [ ! -f "$FILE_NAME" ]; then
      echo "File $FILE_NAME does not exist locally. Please download
      installation package to proceed. Exiting."
      exit 1
      fi
      # Compare checksums
      if [ "$(wget -qO- $SIGNATURE_URL)" == "$(sha1sum $FILE_NAME | awk '{print
      $1}')" ]; then
      echo "Checksums match. File is verified."
      else
      echo "Checksums do not match. File might be corrupted or tampered with."
      If the checksum of the binary packages does not match the checksum from
      download.yugabyte.com, this is a fail.
    remediation: |
      Alter the configured repositories so they only include valid and authorized sources of
      packages.
      #!/bin/bash
      # URL of the file to download
      FILE_URL="https://downloads.yugabyte.com/releases/2.20.0.0/yugabyte-2.20.0.0-
      b1-linux-x86_64.tar.gz"
      # Download the file
      wget $FILE_URL
    impact: |

    default_value: N/A
    type: "Manual"
    references:
      -
      -
    cis_controls:
      - 16.5 Use Up-to-Date and Trusted Third-Party Software Components
      - 18.4 Only Use Up-to-date And Trusted Third-Party Components

  - id: "1.2"
    title: "Ensure systemd Service Files Are Enabled"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      Confirm, and correct if necessary, the YugabyteDB systemd service is enabled.
    rationale: |
      Enabling the systemd service on the OS ensures the database service is active when a 
      change of state occurs as in the case of a system startup or reboot.
    audit: |
      The default operating target on systemd-powered operating systems is typically "multiuser". One confirms the default target by executing the following:
      $ whoami root
      $ systemctl get-default multi-user.target
      $ systemctl list-dependencies multi-user.target | grep -i postgres
      If the intended YugabyteDB service is not registered as a dependency (or "want") of the
      default target (no output for the 3rd command above), this is a fail.
      /etc/systemd/system/yugabyted.service
      [Unit]
      Description=YugabyteDB Server
      After=network.target
      [Service]
      User=<USERNAME>
      Group=<GROUPNAME>
      ExecStart=/path/to/yugabyted start --daemon=false
      ExecStop=/path/to/yugabyted stop
      Restart=on-failure
      RestartSec=10
      LimitNOFILE=4096
      [Install]
      WantedBy=multi-user.target
    remediation: |
      Irrespective of package source, YugabyteDB services can be identified because it
      typically includes the text string "yugabyted". PGDG installs do not automatically
      register the service as a "want" of the default systemd target. Multiple instances of
      YugabyteDB services often distinguish themselves using a version number.
      # whoami root
      # systemctl enable yugabyted
      Created symlink /etc/systemd/system/multi-user.target.wants/yugabyted.service
      → /usr/lib/systemd/system/yugabyted.service.
      # systemctl list-dependencies multi-user.target | grep -i yugabyted
      ├─yugabyted.service
    impact: |
      
    default_value: N/A
    type: "Manual"
    references:
      - 
      - 
    cis_controls:
      - 

  - id: "1.3"
    title: "Ensure Data Cluster Initialized Successfully"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      First-time installs of YugabyteDB require the instantiation of the database cluster. A
      database cluster is a collection of databases that are managed by a single server
      instance.
    rationale: |
      For the purposes of security, YugabyteDB enforces ownership and permissions of the
      data cluster such that:
      • An initialized data cluster is owned by the UNIX account that created it.
      • The data cluster cannot be accessed by other UNIX user accounts.
      • The data-cluster cannot be created or owned by root
      • The YugabyteDB process cannot be invoked by root nor any UNIX user account
      other than the owner of the data cluster.
      Incorrectly instantiating the data cluster will result in a failed installation.
    audit: |
      Use the yb-admin binary to check the cluster status for all YB-Master servers.
      .bin/yb-admin -init_master_addrs <master-ip-address:port> list_all_masters
      Next, check the cluster status for all YB-TServer.
      .bin/yb-admin -init_master_addrs <master ip address> list_all_tablet_servers
    remediation: |
      In the case of a cluster initialization failure, please visit YugabyteDB Troubleshooting
      guide: https://docs.yugabyte.com/preview/troubleshoot/
    impact: |
      
    default_value: N/A
    type: "Automated"
    references:
      - 
      - 
    cis_controls:
      - 3.3 Configure Data Access Control Lists
      - 14.6 Protect Information through Access Control Lists

  - id: "1.4"
    title: "Ensure a separate user and group exist for YugabyteDB"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      Create separate userid and group for YugabyteDB
    rationale: |
      All processes need to run as a user with least privilege. This mitigates the potential 
      impact of malware to the system.
    audit: |
      Logon to the server where YugabyteDB is installed.
      To confirm existence of the group, execute the following command:
      getent growd | grep yugabyte
      If either the group or user do not exist, or if the user is not a member of the group, this is
      a finding.
    remediation: |
      Create a group for YugabyteDB (if it does not already exist)
      sudo groupadd yugabyte
      Create a user which is only used for running YugabyteDB and its related processes
      sudo useradd -m -d /home/yugabyte -s /bin/bash -g yugabyte -u <USERID_NUMBER>
      yugabyte
      Replacing <USERID_NUMBER> with a number not already used on the server
    impact: |
      
    default_value: N/A
    type: "Manual"
    references:
      - 
      - 
    cis_controls:
      - 3.3 Configure Data Access Control Lists
      - 14.6 Protect Information through Access Control Lists

  - id: "1.5"
    title: "Ensure the latest version of Python is installed"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      A prerequisite to installing YugabyteDB is the installation of Python. The version of
      Python installed should be the most recent that is compatible with the organizations'
      operational needs.
    rationale: |
      Using the most recent YugabyteDB can help limit the possibilities for vulnerabilities in
      the software, the installation version applied during setup should be established
      according to the needs of the organization. Ensure you are using a release that is
      covered by a level of support which includes regular updates to address vulnerabilities.
    audit: |
      To verify that you have the correct version of python installed:
      #!/bin/bash
      # Get the Python version
      PYTHON_VERSION=$(python --version 2>&1 | awk '{print $2}')
      # Use sort to compare versions
      if [[ $(echo -e "3.11\n$PYTHON_VERSION" | sort -V | head -n1) ==
      "$PYTHON_VERSION" && "$PYTHON_VERSION" != "3.11" ]]; then
      echo "This version of python ($PYTHON_VERSION) is not supported by
      YugabyteDB."
      exit 1
      If an old/unsupported version of Python is installed this is a finding.
    remediation: |
      1. Uninstall the old/unsupported version of Python, if present.
      2. Download the latest compatible release of the Python:
      www.python.org/downloads
      3. Follow the provided installation instructions to complete the install.
    impact: |
      
    default_value: N/A
    type: "Automated"
    references:
      - 
      - 
    cis_controls:
      - 16.5 Use Up-to-Date and Trusted Third-Party Software Components
      - 18.4 Only Use Up-to-date And Trusted Third-Party Components

  - id: "1.6"
    title: "Ensure latest version of YugabyteDB is installed"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The YugabyteDB installation version, along with the patches, should be the most recent
      that is compatible with the organization's operational needs. When obtaining and
      installing software packages (typically via apt-get or you can compile the source code),
      it's imperative that packages (or the source code, tarball) are sourced only from valid
      and authorized repository download.yugabyte.com.
    rationale: |
      Using the most recent version of YugabyteDB can help limit the possibilities for
      vulnerabilities in the software, the installation version applied during setup should be
      established according to the needs of the organization. Ensure you are using a release
      that is covered by a level of support which includes regular updates to address
      vulnerabilities.
    audit: |
      To verify the version of YugabyteDB you have installed:
      ./bin/yugabyted version
      /home/root/yugabyte-2.20.0.0/version_metadata.json
      ----------------------------------------------------------------------
      | Version |
      ----------------------------------------------------------------------
      | Version : 2.20.0.0-b76 |
      | Build Time : 04 Nov 2023 02:23:30 UTC |
      | Build Hash : 0026607ed49516b4d5770f5479dd5d60d44710af |
      ----------------------------------------------------------------------
      If an old/unsupported version of YugabyteDB is installed this is a finding
    remediation: |
      Create a group for yugabyte (if it does not already exist)
      sudo groupadd yugabyte
      Create a user which is only used for running YugabyteDB and its related processes.
      sudo groupadd -m -d <DIRECTORY_WHERE_YUGABYTEDB_INSTALLED> -s /bin/bash -g
      yugabyte -u <USERID_NUMBER> yugabyte
      Replacing <DIRECTORY_WHERE_YUGABYTEDB_INSTALLED with the full path of where
      YugabyteDB binaries are installed.
      Replacing <USERID_NUMBER> with a number not already used on the server
    impact: |
      
    default_value: N/A
    type: "Automated"
    references:
      - 
      - 
    cis_controls:
      - 

  - id: "1.7"
    title: "Ensure the YugabyteDB service is run as a non-root user"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      Though YugabyteDB database may be run as root, it should run as another non-root user.
    rationale: |
      One of the best ways to reduce your exposure to attack is to create a unique,
      unprivileged user and group for the server application. A best practice is to follow is
      ensuring processes run with a user with least privilege.
    audit: |
      Logon to the server where YugabyteDB master service is running.
    remediation: |
      Create a group for yugabyte (if it does not already exist)
      sudo groupadd yugabyte
      Create a user which is only used for running YugabyteDB and its related processes.
      sudo groupadd -m -d <DIRECTORY_WHERE_YUGABYTEDB_INSTALLED> -s /bin/bash -g
      yugabyte -u <USERID_NUMBER> yugabyte
      Replacing <DIRECTORY_WHERE_YUGABYTEDB_INSTALLED with the full path of where
      YugabyteDB binaries are installed.
      Replacing <USERID_NUMBER> with a number not already used on the server
    impact: |
      
    default_value: N/A
    type: "Automated"
    references:
      - 
      - 
    cis_controls:
      - 3.3 Configure Data Access Control Lists
      - 14.6 Protect Information through Access Control Lists

  - id: "1.8"
    title: "Ensure clocks are synchronized on all node"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      Enabling Network Time Protocol (NTP), or some equivalent way, to keep clocks on all nodes in sync is critical.
    rationale: |
      YugabyteDB decides which data is most current between all of the nodes in the cluster
      based on timestamps. It is paramount to ensure all clocks are in-sync, otherwise the
      most current data may not be returned or worse, marked for deletion.
    audit: |
      Depending on the Linux installation this may be checked by executing the following
      command on each node:
      ps -aef | grep ntp OR
      ps -aef | grep chronyd
      If NTP is not configured or clocks are out-of-sync then this is a finding.
    remediation: |
      Install and start the time protocol on every node in the YugabyteDB cluster.
    impact: |
      
    default_value: N/A
    type: "Manual"
    references:
      - 
      - 
    cis_controls:
      - 8.4 Standardize Time Synchronization
      - 6.1 Utilize Three Synchronized Time Sources