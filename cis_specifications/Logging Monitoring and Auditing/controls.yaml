section:
  name: "Logging Monitoring and Auditing"
  description: "This section provides guidance with respect to Yugabyte’s auditing and logging  behavior."
  number: "3"

controls:
  - id: "3.1.1"
    title: "Logging Rationale"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      Having an audit trail is an important feature of any relational database system. You want  enough detail to describe when an event of interest has started and stopped, what the  event is/was, the event's cause, and what the event did/is doing to the system.
      Ideally, the logged information is in a format permitting further analysis giving us new  perspectives and insight.
      The YugabyteSQL configuration file ysql_pg.conf is where all adjustable parameters  can be set. A configuration file is created as part of the data cluster's creation i.e. initdb.  The configuration file enumerates all tunable parameters and even though most of them  are commented out it is understood that they are in fact active and at those very same  documented values. The reason that they are commented out is to signify their default  values. Uncommenting them will force the server to read these values instead of using  the default values.
    rationale:
    audit:
    remediation:
    default_value:
    type: "Manual"
    references:
      - "https://docs.yugabyte.com/preview/reference/configuration/yb-tserver/#ysql-pgco"
    cis_controls: |
      - 8.2 Collect Audit Logs Collect audit logs. Ensure that logging, per the enterprise’s audit log  management process, has been enabled across enterprise assets.
      - 8.5 Collect Detailed Audit Logs Configure detailed audit logging for enterprise assets containing sensitive data.  Include event source, date, username, timestamp, source addresses, destination  addresses, and other useful elements that could assist in a forensic investigation.
      - 6.2 Activate audit logging Ensure that local logging has been enabled on all systems and networking  devices.
      - 6.3 Enable Detailed Logging Enable system logging to include detailed information such as an event source,  date, user, timestamp, source addresses, destination addresses, and other useful  elements.

  - id: "3.1.2"
    title: "Ensure the log destinations are set correctly"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      YugabyteDB by default supports logging server messages to stderr.
    rationale: |
      If log_destination is not set, then any log messages generated by the core YugabyteSQL processes will be lost.
    audit: |
      Execute the following YSQL statement to confirm that the expected logging directory is  specified:

      yugabyte=# SHOW log_destination;
       log_destination
      -----------------
       stderr
      (1 row)

      The log destinations should comply with your organization's policies on logging. If all the  expected log destinations are not set, this is a fail.
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the  following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv=“log_destination='stderr'”
    default_value: stderr
    type: "Automated"
    references: |
      - https://docs.yugabyte.com/preview/reference/configuration/
      - https://docs.yugabyte.com/preview/reference/configuration/yb-tserver/#ysql
      - https://docs.yugabyte.com/preview/secure/audit-logging/
    cis_controls: |
      - 8.2 Collect Audit Logs Collect audit logs. Ensure that logging, per the enterprise’s audit log  management process, has been enabled across enterprise assets.
      - 8.5 Collect Detailed Audit Logs. Configure detailed audit logging for enterprise assets containing sensitive data.  Include event source, date, username, timestamp, source addresses, destination  addresses, and other useful elements that could assist in a forensic investigation.
      - 6.2 Activate audit logging Ensure that local logging has been enabled on all systems and networking  devices.
      - 6.3 Enable Detailed Logging Enable system logging to include detailed information such as an event source,  date, user, timestamp, source addresses, destination addresses, and other useful  elements.

  - id: "3.1.3"
    title: "Ensure the filename pattern for log files is set correctly"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The log_filename setting specifies the filename pattern for log files. The value for
      log_filename should match your organization's logging policy.
      The value is treated as a strftime pattern, so %-escapes can be used to specify timevarying file names. The supported %-escapes are similar to those listed in the Open
      Group's strftime specification. If you specify a file name without escapes, you should
      plan to use a log rotation utility to avoid eventually filling the partition that contains
      log_directory. If there are any time-zone-dependent %-escapes, the computation is
      done in the zone specified by log_timezone. Also, the system's strftime is not used
      directly, so platform- specific (nonstandard) extensions do not work.
    rationale: |
      If log_filename is not set, then the value of log_directory is set to the default.
    audit: |
      Execute the following YSQL statement to confirm that the desired pattern is set:
      yugabyte=# show log_filename;
      log_filename
      --------------------------------
      postgresql-%Y-%m-%d_%H%M%S.log
      (1 row)
      Note: This example shows the use of the strftime %a escape. This creates seven log
      files, one for each day of the week (e.g. postgresql-Mon.log, postgresql-Tue.log, et al).
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv=“log_filename='postgresql-%a.log'”
    impact: |

    default_value: postgresql-%Y-%m-%d_%H%M%S.log
    type: "Automated"
    references:
      - https://man7.org/linux/man-pages/man3/strftime.3.html
      - https://docs.yugabyte.com/preview/secure/audit-logging/
      - https://docs.yugabyte.com/preview/reference/configuration/
    cis_controls:
      - 8.2 Collect Audit Logs Collect audit logs. Ensure that logging, per the enterprise’s audit log management process, has been enabled across enterprise assets.
      - 8.5 Collect Detailed Audit Logs Configure detailed audit logging for enterprise assets containing sensitive data. Include event source, date, username, timestamp, source addresses, destination addresses, and other useful elements that could assist in a forensic investigation.
      - 6.2 Activate audit logging Ensure that local logging has been enabled on all systems and networking devices.
      - 6.3 Enable Detailed Logging Enable system logging to include detailed information such as an event source, date, user, timestamp, source addresses, destination addresses, and other useful elements.

  - id: "3.1.4"
    title: "Ensure the log file permissions are set correctly"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The log_file_mode setting determines the file permissions for log files when
      logging_collector is enabled. The parameter value is expected to be a numeric mode
      specification in the form accepted by the chmod and umask system calls. (To use the
      customary octal format, the number must start with a 0)
      The permissions should be set to allow only the necessary access to authorized
      personnel. In most cases, the best setting is 0600, so that only the server owner can
      read or write the log files. The other commonly useful setting is 0640, allowing members
      of the owner's group to read the files, although to make use of that, you will need to alter
      the log_directory setting to store the log files outside the cluster data directory.
    rationale: |
      Log files often contain sensitive data. Allowing unnecessary access to log files may inadvertently expose sensitive data to unauthorized personnel.
    audit: |
      Execute the following YSQL statement to verify that the setting is consistent with
      organizational logging policy:
      yugabyte=# show log_file_mode;
      log_file_mode
      ---------------
      0600
      (1 row)
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server (in this
      example, setting it to 0660). Add the following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv=“log_file_mode='0660'”
    impact: |

    default_value: 0600
    type: "Automated"
    references:
      - https://docs.yugabyte.com/preview/reference/configuration/
      - https://docs.yugabyte.com/preview/secure/audit-logging/
    cis_controls:
      - 3.3 Configure Data Access Control Lists Configure data access control lists based on a user’s need to know. Apply data access control lists, also known as access permissions, to local and remote file systems, databases, and applications.
      - 14.6 Protect Information through Access Control Lists Protect all information stored on systems with file system, network share, claims, application, or database specific access control lists. These controls will enforce the principle that only authorized individuals should have access to the information based on their need to access the information as a part of their responsibilities.

  - id: "3.1.5"
    title: "Ensure 'log_truncate_on_rotation' is enabled"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      Enabling the log_truncate_on_rotation setting when logging_collector is enabled
      causes YugabyteDB to truncate (overwrite) existing log files with the same name during
      log rotation instead of appending to them.
      Note: Truncation will occur only when a new file is being opened due to time-based
      rotation, not during server startup or size-based rotation (see later in this benchmark for
      size-based rotation details).
    rationale: |
      If this setting is disabled, pre-existing log files will be appended to if log_filename is
      configured in such a way that static names are generated. Enabling or disabling the
      truncation should only be decided when also considering the value of log_filename and
      log_rotation_age/log_rotation_size.
    audit: |
      Execute the following YSQL statement to verify how log_truncate_on_rotation is set:
      yugabyte=# show log_truncate_on_rotation;
      log_truncate_on_rotation
      --------------------------
      off
      (1 row)
      If it is not set to on, this is a fail (depending on your organization's logging policy).
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv=“log_truncate_on_rotation='on'”
    impact: |

    default_value: off
    type: "Automated"
    references:
      - https://docs.yugabyte.com/preview/reference/configuration/
      - https://docs.yugabyte.com/preview/secure/audit-logging/
    cis_controls:
      - 8.3 Ensure Adequate Audit Log Storage Ensure that logging destinations maintain adequate storage to comply with the enterprise’s audit log management process.
      - 6.4 Ensure adequate storage for logs Ensure that all systems that store logs have adequate storage space for the logs generated.

  - id: "3.1.6"
    title: "Ensure the maximum log file lifetime is set correctly"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      When logging_collector is enabled, the log_rotation_age parameter determines the
      maximum lifetime of an individual log file (depending on the value of log_filename).
      After this many minutes have elapsed, a new log file will be created via automatic log
      file rotation. Current best practices advise log rotation at least daily, but your
      organization's logging policy should dictate your rotation schedule.
    rationale: |
      Log rotation is a standard best practice for log management.
    audit: |
      Execute the following YSQL statement to verify the log rotation age is set to an
      acceptable value:
      yugabyte=# show log_rotation_age;
      log_rotation_age
      ------------------
      1d
      (1 row)
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server (in this
      example, setting it to 10d). Add the following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv=“log_rotation_age='10d'”
    impact: |

    default_value: 1d (one day)
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.7"
    title: "Ensure the maximum log file size is set correctly"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The log_rotation_size setting determines the maximum size of an individual log file.
      Once the maximum size is reached, automatic log file rotation will occur.
    rationale: |
      If this is set to zero, the size-triggered creation of new log files is disabled. This will
      prevent automatic log file rotation when files become too large, which could put log data
      at increased risk of loss (unless age-based rotation is configured).
    audit: |
      Execute the following YSQL statement to verify that log_rotation_size is set in
      compliance with the organization's logging policy:
      yugabyte=# show log_rotation_size;
      log_rotation_size
      -------------------
      10MB
      (1 row)
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server (in this
      example, setting it to 1GB). Add the following GFLAG to YB-TServer:
      ./bin/yb-tserver --ysql_pg_conf_csv=“log_rotation_size='1GB'”
    impact: |

    default_value: 10 MB
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.8"
    title: "Ensure the correct syslog facility is selected"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The syslog_facility setting specifies the syslog "facility" to be used when logging to
      syslog is enabled. You can choose from any of the 'local' facilities:
      • LOCAL0
      • LOCAL1
      • LOCAL2
      • LOCAL3
      • LOCAL4
      • LOCAL5
      • LOCAL6
      • LOCAL7
      Your organization's logging policy should dictate which facility to use based on the
      syslog daemon in use.
    rationale: |
      If not set to the appropriate facility, the YugabyteDB log messages may be intermingled
      with other applications' log messages, incorrectly routed, or potentially dropped
      (depending on your syslog configuration).
    audit: |
      Execute the following YSQL statement and verify that the correct facility is selected:
      yugabyte=# show syslog_facility;
      syslog_facility
      -----------------
      local0
      (1 row)
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server (in this
      example, setting it to the LOCAL1 facility). Add the following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv=“syslog_facility='local1'”
    impact: |

    default_value: LOCAL0
    type: "Manual"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.9"
    title: "Ensure syslog messages are not suppressed"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      When logging to Syslog and this is on, then each message will be prefixed by an
      increasing sequence number.
    rationale: |
      Many modern Syslog implementations perform a log optimization and suppress
      repeated log entries while emitting “--- last message repeated N times ---”. In more
      modern Syslog implementations, repeated message suppression can be configured (for
      example, $RepeatedMsgReduction in rsyslog).
    audit: |
      Execute the following YSQL statement and confirm that the syslog_sequence_numbers
      is enabled (on):
      yugabyte=# show syslog_sequence_numbers;
      syslog_sequence_numbers
      -------------------------
      on
      (1 row)
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv=“syslog_sequence_numbers='off'”
    impact: |
      If disabled, messages sent to Syslog could be suppressed and not logged. While a
      message is emitted stating that a given message was repeated and suppressed, the
      timestamp associated with these suppressed messages are lost, potentially damaging
      the recreation of an incident timeline.
    default_value: on
    type: "Manual"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.10"
    title: "Ensure syslog messages are not lost due to size"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      YugabyteDB log messages can exceed 1024 bytes, which is a typical size limit for
      traditional Syslog implementations. When syslog_split_messages is off, YugabyteDB
      server log messages are delivered to the Syslog service as is, and it is up to the Syslog
      service to cope with the potentially bulky messages. When syslog_split_messages is
      on, messages are split by lines, and long lines are split so that they will fit into 1024
      bytes.
      If syslog is ultimately logging to a text file, then the effect will be the same either way,
      and it is best to leave the setting on, since most syslog implementations either cannot
      handle large messages or would need to be specially configured to handle them. But if
      syslog is ultimately writing into some other medium, it might be necessary or more
      useful to keep messages logically together.
    rationale: |

    audit: |
      Execute the following YSQL statement to confirm that long log messages are split when
      logging to Syslog:
      yugabyte=# show syslog_split_messages;
      syslog_split_messages
      -----------------------
      on
      (1 row)
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv=“syslog_split_messages='off'”
    impact: |
      Depending on the Syslog server in use, log messages exceeding 1024 bytes may be
      lost or, potentially, cause the Syslog server processes to abort.
    default_value: on
    type: "Manual"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.11"
    title: "Ensure the program name for YugabyteDB syslog messages is correct"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The syslog_ident setting specifies the program name used to identify YugabyteDB
      messages in syslog logs. An example of a possible program name is yugabyte.
    rationale: |
      If this is not set correctly, it may be difficult or impossible to distinguish YugabyteDB
      messages from other messages in Syslog logs.
    audit: |
      Execute the following YSQL statement to verify the program name is set correctly:
      yugabyte=# show syslog_ident;
      syslog_ident
      --------------
      postgres
      (1 row)
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server (in this
      example, assuming a program name of yugabyte). Add the following GFLAG to YBTServer:

      ./bin/yb-tserver --ysql_pg_conf_csv="syslog_ident='yugabyte'"
    impact: |

    default_value: postgres
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.12"
    title: "Ensure the correct messages are written to the server log "
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The log_min_messages setting specifies the message levels that are written to the server
      log. Each level includes all the levels that follow it. The lower the level (vertically,
      below), the fewer messages are sent.
      Valid values are:
      • DEBUG5
      • DEBUG4
      • DEBUG3
      • DEBUG2
      • DEBUG1
      • INFO
      • NOTICE
      • WARNING
      • ERROR
      • LOG
      • FATAL
      • PANIC
      WARNING is considered the best practice unless indicated otherwise by your
      organization's logging policy.
    rationale: |
      If this is not set to the correct value, too many messages or too few messages may be
      written to the server log.
    audit: |
      Execute the following YSQL statement to confirm the setting is correct:
      yugabyte=# show log_min_messages;
      log_min_messages
      ------------------
      warning
      (1 row)
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server (in this
      example, to set it to warning). Add the following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv="log_min_messages='warning'"
    impact: |

    default_value: WARNING
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.13"
    title: "Ensure the correct YSQL statements generating errors are recorded"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The log_min_error_statement setting causes all YSQL statements generating errors at
      or above the specified severity level to be recorded in the server log. Each level
      includes all the levels that follow it. The lower the level (vertically, below), the fewer
      messages are recorded. Valid values are:
      • DEBUG5
      • DEBUG4
      • DEBUG3
      • DEBUG2
      • DEBUG1
      • INFO
      • NOTICE
      • WARNING
      • ERROR
      • LOG
      • FATAL
      • PANIC
      ERROR is considered the best practice setting. Changes should only be made in
      accordance with your organization's logging policy. Note: To effectively turn off logging
      of failing statements, set this parameter to PANIC.
    rationale: |
      If this is not set to the correct value, too many erring YSQL statements or too few erring
      YSQL statements may be written to the server log.
    audit: |
      Execute the following YSQL statement to verify the setting is correct:
      yugabyte=# show log_min_error_statement;
      log_min_error_statement
      -------------------------
      error
      (1 row)
      If not configured to at least ERROR, this is a fail.
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server (in the
      example, to warning). Add the following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv="log_min_error_statement='warning'"
    impact: |

    default_value: ERROR
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.14"
    title: "Ensure 'debug_print_parse' is disabled"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The debug_print_parse setting enables printing the resulting parse tree for each
      executed query. These messages are emitted at the LOG message level. Unless directed
      otherwise by your organization's logging policy, it is recommended this setting be
      disabled by setting it to off.
    rationale: |
      Enabling any of the DEBUG printing variables may cause the logging of sensitive
      information that would otherwise be omitted based on the configuration of the other
      logging settings.
    audit: |
      Execute the following YSQL statement to confirm the setting is correct:
      yugabyte=# show debug_print_parse;
      debug_print_parse
      -------------------
      off
      (1 row)
      If not configured to off, this is a fail.
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv="debug_print_parse='off'"
    impact: |

    default_value: off
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.15"
    title: "Ensure 'debug_print_rewritten' is disabled"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The debug_print_rewritten setting enables printing the query rewriter output for each
      executed query. These messages are emitted at the LOG message level. Unless directed
      otherwise by your organization's logging policy, it is recommended this setting be
      disabled by setting it to off.
    rationale: |
      Enabling any of the DEBUG printing variables may cause the logging of sensitive
      information that would otherwise be omitted based on the configuration of the other
      logging settings.
    audit: |
      Execute the following YSQL statement to confirm the setting is disabled:
      yugabyte=# show debug_print_rewritten;
      debug_print_rewritten
      -----------------------
      off
      (1 row)
      If not configured to off, this is a fail.
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv="debug_print_rewritten='off'"
    impact: |

    default_value: off
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.16"
    title: "Ensure 'debug_print_plan' is disabled"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The debug_print_plan setting enables printing the execution plan for each executed
      query. These messages are emitted at the LOG message level. Unless directed
      otherwise by your organization's logging policy, it is recommended this setting be
      disabled by setting it to off.
    rationale: |
      Enabling any of the DEBUG printing variables may cause the logging of sensitive
      information that would otherwise be omitted based on the configuration of the other
      logging settings.
    audit: |
      Execute the following YSQL statement to verify the setting is disabled:
      yugabyte=# show debug_print_plan;
      debug_print_plan
      ------------------
      off
      (1 row)
      If not configured to off, this is a fail.
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv="debug_print_plan='off'"
    impact: |

    default_value: off
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.17"
    title: "Ensure 'debug_pretty_print' is enabled"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      Enabling debug_pretty_print indents the messages produced by debug_print_parse,
      debug_print_rewritten, or debug_print_plan making them significantly easier to read.
    rationale: |
      If this setting is disabled, the "compact" format is used instead, significantly reducing the
      readability of the DEBUG statement log messages.
    audit: |
      Execute the following YSQL statement to confirm the setting is enabled:
      yugabyte=# show debug_pretty_print;
      debug_pretty_print
      --------------------
      on
      (1 row)
      If not configured to on, this is a fail.
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv="debug_pretty_print='on'"
    impact: |
      Be advised that the aforementioned DEBUG printing options are disabled, but if your
      organizational logging policy requires them to be on then this option comes into play.
    default_value: on
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.18"
    title: "Ensure 'log_connections' is enabled"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      Enabling the log_connections setting causes each attempted connection to the server
      to be logged, as well as successful completion of client authentication. This parameter
      cannot be changed after the session start.
    rationale: |
      YugabyteDB does not maintain an internal record of attempted connections to the
      database for later auditing. It is only by enabling the logging of these attempts that one
      can determine if unexpected attempts are being made.
      Note that enabling this without also enabling log_disconnections provides little value.
      Generally, you would enable/disable the pair together.
    audit: |
      Execute the following YSQL statement to verify the setting is enabled:
      yugabyte=# show log_connections;
      log_connections
      -----------------
      off
      (1 row)
      If not configured to on, this is a fail.
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv=“log_filename="log_connections='on'"
    impact: |

    default_value: off
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.19"
    title: "Ensure 'log_disconnections' is enabled"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      Enabling the log_disconnections setting logs the end of each session, including
      session duration. This parameter cannot be changed after the session start.
    rationale: |
      YugabyteDB does not maintain the beginning or ending of a connection internally for
      later review. It is only by enabling the logging of these that one can examine
      connections for failed attempts, 'over long' duration, or other anomalies.
      Note that enabling this without also enabling log_connections provides little value.
      Generally, you would enable/disable the pair together.
    audit: |
      Execute the following YSQL statement to verify the setting is enabled:
      yugabyte=# show log_disconnections;
      log_disconnections
      --------------------
      off
      (1 row)
      If not configured to on, this is a fail.
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv="log_disconnections='on'"
    impact: |

    default_value: off
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.20"
    title: "Ensure 'log_error_verbosity' is set correctly"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The log_error_verbosity setting specifies the verbosity (amount of detail) of logged
      messages. Valid values are:
      • TERSE
      • DEFAULT
      • VERBOSE
      with each containing the fields of the level above it as well as additional fields.
      TERSE excludes the logging of DETAIL, HINT, QUERY, and CONTEXT error information.
      VERBOSE output includes the SQLSTATE, error code, and the source code file name,
      function name, and line number that generated the error.
      The appropriate value should be set based on your organization's logging policy.
    rationale: |
      If this is not set to the correct value, too many details or too few details may be logged.
    audit: |
      Execute the following YSQL statement to verify the setting is correct:
      yugabyte=# show log_error_verbosity;
      log_error_verbosity
      ---------------------
      default
      (1 row)
      If not configured to verbose, this is a fail.
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server (in this
      example, to verbose). Add the following GFLAG to YB-TServer:.

      ./bin/yb-tserver --ysql_pg_conf_csv="log_error_verbosity=’verbose'"
    impact: |

    default_value: DEFAULT
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.21"
    title: "Ensure 'log_hostname' is set correctly"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      Enabling the log_hostname setting causes the hostname of the connecting host to be
      logged in addition to the host's IP address for connection log messages. Disabling the
      setting causes only the connecting host's IP address to be logged, and not the
      hostname. Unless your organization's logging policy requires hostname logging, it is
      best to disable this setting so as not to incur the overhead of DNS resolution for each
      statement that is logged.
    rationale: |
      Depending on your hostname resolution setup, enabling this setting might impose a
      non- negligible performance penalty. Additionally, the IP addresses that are logged can
      be resolved to their DNS names when reviewing the logs (unless dynamic hostnames
      are being used as part of your DHCP setup).
    audit: |
      Execute the following YSQL statement to verify the setting is correct:
      yugabyte=# show log_hostname;
      log_hostname
      --------------
      off
      (1 row)
      If not configured to off, this is a fail.
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server (in this
      example, to verbose). Add the following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv="log_hostname=’verbose'"
    impact: |

    default_value: off
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.22"
    title: "Ensure 'log_line_prefix' is set correctly"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The log_line_prefix setting specifies a printf-style string that is prefixed to each
      logline. If blank, no prefix is used. You should configure this as recommended by the
      pgBadger development team unless directed otherwise by your organization's logging
      policy.
      % characters begin "escape sequences" that are replaced with status information as
      outlined below. Unrecognized escapes are ignored. Other characters are copied straight
      to the logline. Some escapes are only recognized by session processes and will be
      treated as empty by background processes such as the main server process. Status
      information may be aligned either left or right by specifying a numeric literal after the %
      and before the option. A negative value will cause the status information to be padded
      on the right with spaces to give it a minimum width, whereas a positive value will pad on
      the left. Padding can be useful to aid human readability in log files.
      Any of the following escape sequences can be used:
      %a = application name
      %u = user name
      %d = database name
      %r = remote host and port
      %h = remote host
      %b = backend type
      %p = process ID
      %t = timestamp without milliseconds
      %m = timestamp with milliseconds
      %n = timestamp with milliseconds (as a Unix epoch)
      %Q = query ID (0 if none or not computed)
      %i = command tag
      %e = SQL state
      %c = session ID
      %l = session line number
      %s = session start timestamp
      %v = virtual transaction ID
      %x = transaction ID (0 if none)
      %q = stop here in non-session processes
      %% = '%'
    rationale: |
      Properly setting log_line_prefix allows for adding additional information to each log
      entry (such as the user, or the database). Said information may then be of use in
      auditing or security reviews.
    audit: |
      Execute the following YSQL statement to verify the setting is correct:
      yugabyte=# show log_line_prefix;
      log_line_prefix
      -----------------
      %m [%p]
      (1 row)
      If the prefix does not at a minimum include %m [%p]: [%l-1]
      db=%d,user=%u,app=%a,client=%h, this is a fail.
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv="log_line_prefix=’%m [%p]: [%l-1]’"
    impact: |

    default_value: '%m [%p]'
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.23"
    title: "Ensure 'log_statement' is set correctly"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The log_statement setting specifies the types of YSQL statements that are logged.
      Valid values are:
      • none
      • ddl
      • mod
      • all
      It is recommended this be set to ddl unless otherwise directed by your organization's
      logging policy.
      ddl logs all data definition statements:
      • CREATE
      • ALTER
      • DROP
      mod logs all ddl statements, plus data-modifying statements:
      • INSERT
      • UPDATE
      • DELETE
      • TRUNCATE
      • COPY FROM
      (PREPARE, EXECUTE, and EXPLAIN ANALYZE statements are also logged if their contained
      command is of an appropriate type.)
      For clients using extended query protocol, logging occurs when an Execute message is
      received, and values of the Bind parameters are included (with any embedded singlequote marks doubled).
    rationale: |
      Setting log_statement to align with your organization's security and logging policies
      facilitates later auditing and review of database activities.
    audit: |
      Execute the following YSQL statement to verify the setting is correct:
      yugabyte=# show log_statement;
      log_statement
      ---------------
      none
      (1 row)
      If log_statement is set to none then this is a fail.
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv="log_line_prefix=’%m [%p]: [%l-1]’"
    impact: |

    default_value: none
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.1.24"
    title: "Ensure 'log_timezone' is set correctly"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The log_timezone setting specifies the time zone to use in timestamps within log
      messages. This value is cluster-wide, so that all sessions will report timestamps
      consistently. Unless directed otherwise by your organization's logging policy, set this to
      either GMT or UTC.
    rationale: |
      Log entry timestamps should be configured for an appropriate time zone as defined by
      your organization's logging policy to ensure a lack of confusion around when a logged
      event occurred.
      Note that this setting affects only the timestamps present in the logs. It does not affect
      the time zone in use by the database itself (for example, select now()), nor does it
      affect the host's time zone.
    audit: |
      Execute the following YSQL statement:
      yugabyte=# show log_timezone;
      log_timezone
      --------------
      UTC
      (1 row)
      If log_timezone is not set to GMT, UTC, or as defined by your organization's logging policy
      this is a fail.
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server (in this
      example, setting it to UTC). Add the following GFLAG to YB-TServer:

      ./bin/yb-tserver --ysql_pg_conf_csv=“log_timezone='UTC'”
    impact: |

    default_value: By default, the YugabyteDB packages will set this to match the server's timezone in the Operating System.
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.2"
    title: "Ensure the YugbayteDB Audit Extension (pgAudit) is enabled"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      The YugabyteDB Audit Extension (pgAudit) provides detailed session and/or object
      audit logging via the standard YugabyteDB logging facility. The goal of pgAudit is to
      provide YugabyteDB users with the capability to produce audit logs often required to
      comply with government, financial, or ISO certifications.
    rationale: |
      Basic statement logging can be provided by the standard logging facility with
      log_statement = all. This is acceptable for monitoring and other uses but does not
      provide the level of detail generally required for an audit. It is not enough to have a list
      of all the operations performed against the database, it must also be possible to find
      particular statements that are of interest to an auditor. The standard logging facility
      shows what the user requested, while pgAudit focuses on the details of what happened
      while the database was satisfying the request.
      When logging SELECT and DML statements, pgAudit can be configured to log a separate
      entry for each relation referenced in a statement. No parsing is required to find all
      statements that touch a particular table. In fact, the goal is that the statement text is
      provided primarily for deep forensics and should not be required for an audit.
    audit: |
      Execute the following YSQL statement to verify pgAudit is enabled:
      yugabyte=# show shared_preload_libraries ;
      shared_preload_libraries
      -------------------------------------------------------
      pg_stat_statements,yb_pg_metrics,pgaudit,pg_hint_plan
      (1 row)
      If the output does not contain pgaudit, this is a fail.
      Next, verify that desired auditing components are enabled:
      yugabyte=# show pgaudit.log;
      pgaudit.log
      -------------
      none
      (1 row)
      If the output does not contain the desired auditing components, this is a fail.
      The list below summarizes pgAudit.log components:
      READ: SELECT and COPY when the source is a relation or a query.
      WRITE: INSERT, UPDATE, DELETE, TRUNCATE, and COPY when the destination is a relation.
      FUNCTION: Function calls and DO blocks.
      ROLE: Statements related to roles and privileges: GRANT, REVOKE, CREATE/ALTER/DROP
      ROLE.
      DDL: All DDL that is not included in the ROLE class.
      MISC: Miscellaneous commands, e.g. DISCARD, FETCH, CHECKPOINT, VACUUM.
    remediation: |
      After configuring the YB-TServer and starting the cluster, create the pgAudit extension
      by executing the following YSQL statement:
      yugabyte=# CREATE EXTENSION IF NOT EXISTS pgaudit;
      CREATE EXTENSION
      You only need to run this statement on a single node, and it will apply across your
      cluster.
      Use the following steps to configure audit logging in a YugabyteDB cluster with bare
      minimum configurations.
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:
      ./bin/yb-tserver --
      ysql_pg_conf_csv="pgaudit.log='DDL',pgaudit.log_level=notice,pgaudit.log_clie
      nt=ON"
    impact: |
      Depending on settings, it is possible for pgAudit to generate an enormous volume of
      logging. Be careful to determine exactly what needs to be audit logged in your
      environment to avoid logging too much.
    default_value: pgAudit is pre-bundled with standard YugabyteDB distribution but requires installation.
    type: "Automated"
    references:
      -
      -
    cis_controls:
      -

  - id: "3.3"
    title: "Ensure that auditing is enabled for YCQL"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      Audit logging can be used to record information about YCQL statements or events
      (such as login events) and log the records on a per-node basis into the YB-Tserver logs.
      Audit logging can be enabled on YugabyteDB cluster by setting the
      ycql_enable_audit_log TServer flag to true. By default, each TServer records all login
      events and YCQL commands issued to the server.
      Audit record is logged before an operation attempts to be executed, and failures are
      audited as well. If an operation fails to execute, both operation execution and failure are
      logged. However, an error that happens during parsing or analysis of YCQL statement
      results only in an error audit record to be logged.
      YCQL audit logging can be further customized using additional YB-TServer flags.
    rationale: |
      Unauthorized attempts to create, drop or alter users or data should be a concern.
    audit: |
      Run the following command to verify whether auditing is enabled on the YCQL interface
      of the YugabyteDB server.
      cat ts.config | grep ycql_enable_audit_log
      If not configured to true, this is a fail.
    remediation: |
      Use the yb-tserver binary and its flags to configure the YB-TServer server. Add the
      following GFLAG to YB-TServer:

      ./bin/yb-tserver <options> --ycql_enable_audit_log=true
    impact: |

    default_value: false
    type: "Manual"
    references:
      -
      -
    cis_controls:
      -
