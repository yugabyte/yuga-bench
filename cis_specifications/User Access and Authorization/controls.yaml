section:
  name: "User Access and Authorization"
  description: |
    The capability to use database resources at a given level, or user authorization rules,
    allows for user manipulation of the various parts of the Yugabyte Structured Query
    Language (YSQL) database. These authorizations must be structured to block
    unauthorized use and/or corruption of vital data and services by setting restrictions on
    user capabilities.
  number: "4"

controls:
  - id: "4.1"
    title: "Ensure sudo is configured correctly"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      It is common to have more than one authorized individual administering the
      YugabyteDB service at the Operating System level. It is also quite common to permit
      login privileges to individuals on a YugabyteDB host who otherwise are not authorized
      to access the server's data cluster and files. Administering the YugabyteDB data cluster,
      as opposed to its data, is to be accomplished via a localhost login of a regular UNIX
      user account. Access to the yugabyte superuser account is restricted in such a manner
      as to interdict unauthorized access. sudo satisfies the requirements by escalating
      ordinary user account privileges as the YugabyteDB RDBMS superuser.
    rationale: |

    audit: |
      Log in as an Operating System user authorized to escalate privileges and test the sudo
      invocation by executing the following:
      whoami user1
      # groups user1
      # sudo su - yugabyte
      [sudo] password for user1:
      user1 is not in the sudoers file. This incident will be reported.
      As shown above, user1 has not been added to the /etc/sudoers file or made a member
      of any group listed in the /etc/sudoers file. Whereas:
      # whoami user2
      # groups user2 dba
      # sudo su - yugabyte [sudo] password for user2:
      # whoami
      yugabyte
      This shows that the user2 user is configured properly for sudo access by being a
      member of the dba group.
    remediation: |
      As superuser root, execute the following commands:
      # echo '%dba ALL= /bin/su - yugabyte' > /etc/sudoers.d/yugabyte
      # chmod 600 /etc/sudoers.d/yugabyte
      This grants any Operating System user that is a member of the dba group to use sudo
      su - yugabyte to become the yugabyte user.
      Ensure that all Operating System user's that need such access are members of the
      group.
    impact: |

    default_value:
    type: "Manual"
    references:
      -
      -
    cis_controls:
      -

  - id: "4.2"
    title: "Ensure excessive administrative privileges are revoked"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      With respect to YugabyteDB administrative YSQL commands, only superusers should
      have elevated privileges. YugabyteDB regular, or application, users should not possess
      the ability to create roles, create new databases, manage replication, or perform any
      other action deemed privileged. Typically, regular users should only be granted the
      minimal set of privileges commensurate with managing the application:
      • DDL (create table, create view, create index, etc.)
      • DML (select, insert, update, delete)
      Further, it has become best practice to create separate roles for DDL and DML. Given
      an application called 'payroll', one would create the following users:
      • payroll_owner
      • payroll_user
      Any DDL privileges would be granted to the payroll_owner account only, while DML
      privileges would be given to the payroll_user account only. This prevents accidental
      creation/altering/dropping of database objects by application code that runs as the
      payroll_user account.
    rationale: |
      
    audit: |
      
    remediation: |
      If any regular or application users have been granted excessive administrative rights,
      those privileges should be removed immediately via the Yugabyte ALTER ROLE YSQL
      command. Using the same example above, the following YSQL statements revoke all
      unnecessary elevated administrative privileges from the regular user appuser:
      # whoami
      yugabyte
      # ysqlsh -c "ALTER ROLE appuser NOSUPERUSER;" ALTER ROLE
      # ysqlsh -c "ALTER ROLE appuser NOCREATEROLE;" ALTER ROLE
      # ysqlsh -c "ALTER ROLE appuser NOCREATEDB;" ALTER ROLE
      # ysqlsh -c "ALTER ROLE appuser NOREPLICATION;" ALTER ROLE
      # ysqlsh -c "ALTER ROLE appuser NOBYPASSRLS;" ALTER ROLE
      # ysqlsh -c "ALTER ROLE appuser NOINHERIT;" ALTER ROLE
      Verify the appuser now passes your check by having no defined Attributes:
      # whoami
      yugabyte
      # ysqlsh -c "\du appuser"
      List of roles
      Role name | Attributes | Member of
      + + appuser | | {}
    impact: |
      
    default_value: N/A
    type: "Manual"
    references:
      - 
      - 
    cis_controls:
      - 

  - id: "4.3"
    title: "Ensure excessive function privileges are revoked"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      In certain situations, to provide the required functionality, YugabyteDB needs to execute
      internal logic (stored procedures, functions, triggers, etc.) and/or external code modules
      with elevated privileges. However, if the privileges required for execution are at a higher
      level than the privileges assigned to organizational users invoking the functionality
      applications/programs, those users are indirectly provided with greater privileges than
      assigned by their organization. This is known as privilege elevation. Privilege elevation
      must be utilized only where necessary. Execute privileges for application functions
      should be restricted to authorized users only.
    rationale: |
      
    audit: |
      Functions in YugabyteDB can be created with the SECURITY DEFINER option. When
      SECURITY DEFINER functions are executed by a user, said function is run with the
      privileges of the user who created it, not the user who is running it.
      To list all functions that have SECURITY DEFINER, run the following YSQL:
      # whoami root
      # sudo su - yugabyte
      # ysqlsh -c "SELECT nspname, proname, proargtypes, prosecdef, rolname,
      proconfig FROM pg_proc p JOIN pg_namespace n ON p.pronamespace = n.oid JOIN
      pg_authid a ON a.oid = p.proowner WHERE prosecdef OR NOT proconfig IS NULL;"
      In the query results, a prosecdef value of 't' on a row indicates that that function uses
      privilege elevation.
      If elevation privileges are utilized which are not required or are expressly forbidden by
      organizational guidance, this is a fail.
    remediation: |
      Where possible, revoke SECURITY DEFINER on YugabyteDB functions. To change a
      SECURITY DEFINER function to SECURITY INVOKER, run the following YSQL:
      # whoami root
      # sudo su - yugabyte
      # ysqlsh -c "ALTER FUNCTION [functionname] SECURITY INVOKER;"
      If it is not possible to revoke SECURITY DEFINER, ensure the function can be executed by
      only the accounts that absolutely need such functionality:
      yugabyte=# SELECT proname, proacl FROM pg_proc WHERE proname =
      'delete_customer';
      proname | proacl
      + delete_customer |
      {=X/postgres,postgres=X/postgres,appwriter=X/postgres}
      (1 row)
      yugabyte=# REVOKE EXECUTE ON FUNCTION delete_customer(integer,boolean) FROM
      appreader;
      REVOKE
      yugabyte=# SELECT proname, proacl FROM pg_proc WHERE proname =
      'delete_customer';
      proname | proacl
      + delete_customer | {=X/postgres,postgres=X/postgres}
      (1 row)
      Based on the output above, appreader=X/postgres no longer exists in the proacl
      column results returned from the query and confirms appreader is no longer granted
      execute privilege on the function.
    impact: |
      
    default_value: N/A
    type: "Automated"
    references:
      - 
      - 
    cis_controls:
      - 

  - id: "4.4"
    title: "Ensure excessive DML privileges are revoked"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      DML (insert, update, delete) operations at the table level should be restricted to only
      authorized users. YugabyteDB manages table-level DML permissions via the GRANT
      statement.
    rationale: |
      Excessive DML grants can lead to unprivileged users changing or deleting information
      without proper authorization.
    audit: |
      
    remediation: |
      If a given database user has been granted excessive DML privileges for a given
      database table, those privileges should be revoked immediately using the REVOKE
      YSQL command.
      Continuing with the example above, remove unauthorized grants for appreader user
      using the REVOKE statement and verify the Boolean values are now false.
      yugabyte=# REVOKE INSERT, UPDATE, DELETE ON TABLE customer FROM appreader;
      REVOKE
    impact: |
      
    default_value: The table owner/creator has full privileges; all other users must be explicitly granted access.
    type: "Manual"
    references:
      - 
      - 
    cis_controls:
      - 

  - id: "4.5"
    title: "Ensure Row Level Security (RLS) is configured correctly"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      In addition to the YSQL-standard privilege system available through GRANT, tables can
      have row security policies that restrict, on a per-user basis, which individual rows can be
      returned by normal queries or inserted, updated, or deleted by data modification
      commands. This feature is also known as Row Level Security (RLS). By default, tables
      do not have any policies, so if a user has access privileges to a table according to the
      YSQL privilege system, all rows within it are equally available for querying or updating.
      Row security policies can be specific to commands, to roles, or to both. A policy can be
      specified to apply to ALL commands, or to any combination of SELECT, INSERT, UPDATE, or
      DELETE. Multiple roles can be assigned to a given policy, and normal role membership
      and inheritance rules apply. If you use RLS and apply restrictive policies to certain
      users, it is important that the Bypass RLS privilege not be granted to any unauthorized
      users. This privilege overrides RLS- enabled tables and associated policies. Generally,
      only superusers and elevated users should possess this privilege.
    rationale: |
      If RLS policies and privileges are not configured correctly, users could perform actions
      on tables that they are not authorized to perform, such as inserting, updating, or
      deleting rows.
    audit: |
      
    remediation: |
      In this example, we are using the using the example passwd table. We will create three
      database roles to illustrate the workings of RLS:
      yugabyte=# CREATE ROLE admin; CREATE ROLE
      yugabyte=# CREATE ROLE bob; CREATE ROLE
      yugabyte=# CREATE ROLE alice; CREATE ROLE
      Now, we will insert known data into the passwd table:
      yugabyte=# INSERT INTO passwd VALUES
      ('admin','xxx',0,0,'Admin','111-222-3333',null,'/root','/bin/dash');
      INSERT 0 1
      yugabyte=# INSERT INTO passwd VALUES
      ('bob','xxx',1,1,'Bob','123-456-7890',null,'/home/bob','/bin/zsh');
      INSERT 0 1
      yugabyte=# INSERT INTO passwd VALUES
      ('alice','xxx',2,1,'Alice','098-765-4321',null,'/home/alice','/bin/zsh');
      INSERT 0 1
      And we will enable RLS on the table:
      yugabyte=# ALTER TABLE passwd ENABLE ROW LEVEL SECURITY; ALTER TABLE
      Now that RLS is enabled, we need to define one or more policies. Create the
      administrator policy and allow it access to all rows:
      yugabyte=# CREATE POLICY admin_all ON passwd TO admin USING (true) WITH CHECK
      (true);
      CREATE POLICY
      Create a policy for normal users to view all rows:
      yugabyte=# CREATE POLICY all_view ON passwd FOR SELECT USING (true); CREATE
      POLICY
      Create a policy for normal users that allows them to update only their own rows and to
      limit what values can be set for their login shell:
      yugabyte=# CREATE POLICY user_mod ON passwd FOR UPDATE USING (current_user =
      user_name)
      WITH CHECK (
      current_user = user_name AND
      shell IN ('/bin/bash','/bin/sh','/bin/dash','/bin/zsh','/bin/tcsh')
      );
      CREATE POLICY
      Grant all the normal rights on the table to the admin user:
      yugabyte=# GRANT SELECT, INSERT, UPDATE, DELETE ON passwd TO admin; GRANT
      Page 104
      Grant only select access on non-sensitive columns to everyone:
      yugabyte=# GRANT SELECT
      (user_name, uid, gid, real_name, home_phone, extra_info, home_dir, shell) ON
      passwd TO public;
      GRANT
      Grant update to only the sensitive columns:
      yugabyte=# GRANT UPDATE
      (pwhash, real_name, home_phone, extra_info, shell) ON passwd TO public;
      GRANT
      Ensure that no one has been granted Bypass RLS inadvertently, by running the psql
      display command \du+. If unauthorized users do have Bypass RLS granted then resolve
      this using the ALTER ROLE <user> NOBYPASSRLS; command.
      You can now verify that 'admin', 'bob', and 'alice' are properly restricted by querying the
      passwd table as each of these roles.
    impact: |
      
    default_value: N/A
    type: "Manual"
    references:
      - 
      - 
    cis_controls:
      - 

  - id: "4.6"
    title: "Make use of predefined roles"
    profile_applicability:
      - "Level 1 - Yugabyte"
    description: |
      YugabyteDB provides a set of predefined roles that provide access to certain,
      commonly needed, privileged capabilities and information. Administrators can GRANT
      these roles to users and/or other roles in their environment, providing those users with
      access to the specified capabilities and information.
    rationale: |
      In keeping with the principle of least privilege, judicious use of the YugabyteDB
      predefined roles can greatly limit the access to privileged, or superuser, access.
    audit: |
      Review the list of all database roles that have superuser access and determine if one or
      more of the predefined roles would suffice for the needs of that role:
      yugabyte=# select rolname from pg_roles where rolsuper is true;
      rolname
      ----------
      postgres
      yugabyte
      (2 rows)
    remediation: |
      If you've determined that one or more of the predefined roles can be used, simply GRANT
      it:
      yugabyte=# GRANT pg_monitor TO yugabyte; GRANT ROLE
      And then remove superuser from the account:
      yugabyte=# ALTER ROLE yugabyte NOSUPERUSER; ALTER ROLE
      yugabyte=# select rolname from pg_roles where rolsuper is true; rolname
      yugabyte (1 row)
    impact: |
      
    default_value: 
    type: "Manual"
    references:
      - 
      - 
    cis_controls:
      - 
